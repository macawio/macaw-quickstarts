//
//  This file was auto-generated by Macaw tools 0.3.0-SNAPSHOT version built on Tue, 14 Feb 2017 14:52:15 +0530 
//
/**
 * Copyright Â© 2015-2016, Macaw Software Inc.
 * All rights reserved.
 * 
 * This software and related documentation are provided under a
 * license agreement containing restrictions on use and
 * disclosure and are protected by intellectual property laws.
 * Except as expressly permitted in your license agreement or
 * allowed by law, you may not use, copy, reproduce, translate,
 * broadcast, modify, license, transmit, distribute, exhibit,
 * perform, publish, or display any part, in any form, or by
 * any means. Reverse engineering, disassembly, or
 * decompilation of this software, unless required by law for
 * interoperability, is prohibited.
 * 
 * The information contained herein is subject to change
 * without notice and is not warranted to be error-free. If you
 * find any errors, please report them to us in writing.
 */
package http.macaw.io.quickstart.service.employee.rev161201.impl;

import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

import javax.inject.Inject;

import com.cfx.service.client.api.ServiceClientContext;

import http.macaw.io.quickstart.service.employee.rev161201.Employee;

public class EmployeeServiceImpl implements com.cfx.service.api.Service, http.macaw.io.quickstart.service.employee.rev161201.EmployeeService {
    private static String EMPLOYEE_ADDED_NOTIFICATION_ID = "NEW_EMPLOYEE_ADDED";
    private static String EMPLOYEE_RELIEVED_NOTIFICATION_ID = "EMPLOYEE_RELIEVED";

    private final AtomicInteger employeeIdCounter = new AtomicInteger(1);

    @Inject
    private ServiceClientContext serviceClientContext;
    private Map<Integer, Employee> employeeCache = new ConcurrentHashMap<>();

    @Override
    public void initialize(com.cfx.service.api.config.Configuration config) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public void start(com.cfx.service.api.StartContext startContext) throws com.cfx.service.api.ServiceException {
        employeeCache = new ConcurrentHashMap<>();
    }

    @Override
    public void stop(com.cfx.service.api.StopContext stopContext) throws com.cfx.service.api.ServiceException {
        employeeCache.clear();
    }

    @Override
    public int addEmployee(http.macaw.io.quickstart.service.employee.rev161201.Employee employee) {
        if (employee == null) {
            throw new IllegalArgumentException("Null employee cannot be added");
        }
        if (employee.getEmail() == null) {
            throw new IllegalArgumentException("Employee with a null email address cannot be added");
        }
        employee.setId(employeeIdCounter.getAndIncrement());
        employeeCache.put(employee.getId(), employee);
        safePublishNotification(EMPLOYEE_ADDED_NOTIFICATION_ID, employee);
        return employee.getId();
    }

    @Override
    public void deleteEmployee(int employeeId) {
        if (!employeeCache.containsKey(employeeId)) {
            throw new IllegalArgumentException("Unknown employee id " + employeeId);
        }
        final Employee employee = employeeCache.remove(employeeId);
        safePublishNotification(EMPLOYEE_RELIEVED_NOTIFICATION_ID, employee.getEmail());
    }

    @Override
    public java.util.List<http.macaw.io.quickstart.service.employee.rev161201.Employee> getEmployees() {
        return new ArrayList<>(employeeCache.values());
    }

    public void safePublishNotification(final String notificationId, Object payload) {
        try {
            serviceClientContext.getNotificationManager().publish(notificationId, payload);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
