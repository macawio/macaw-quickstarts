# The version of the module/project. Example: 1.0.0
module.version=1.0.0

# The type of the source model from which the code will be generated. Valid values are "yang", "json"
source.model.type=yang

# The full path to the directory containing the input model files from which the artifacts will be generated. 
# Example: /home/me/input/
input.files.dir=/tmp/yang/calculator

# The full path to the directory where the generated artifacts need to be placed
# Example: /home/me/cfx/generated
artifacts.output.dir=/tmp/macaw-services

# The build tool that will be used for the generated project. 
# Valid values are "ivy" or "maven" or "plain-ant" (without those quotes). 
# At this time, we only support "plain-ant".
project.build.tool=plain-ant

# The generated project can be built and deployed/released to release repositories. The organization name
# corresponds to the name of the organization under which this project's artifacts will be released.
# Example: org.myapp
project.dist.organization.name=io.macaw.quickstarts

# The generated project will depend on Macaw service platform/runtime. The dependency version here specifies
# the version of the Macaw platform on which the generated project depends
# Example: 0.9.4
macaw.platform.version=0.9.3


# whether impl part of service needs to be generated afresh
# false(default) -  will check for impl folder, if not present will generate both api and impl else only api is generated  
# true -  will generate/overwrite the api and impl
# Example: true/false
service.gen.option.generate.impl.artifacts=false
