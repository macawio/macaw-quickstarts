//
//  This file was auto-generated by Macaw tools 0.3.0-SNAPSHOT version built on Tue, 14 Feb 2017 14:52:15 +0530 
//
/**
 * Copyright Â© 2015-2016, Macaw Software Inc.
 * All rights reserved.
 * 
 * This software and related documentation are provided under a
 * license agreement containing restrictions on use and
 * disclosure and are protected by intellectual property laws.
 * Except as expressly permitted in your license agreement or
 * allowed by law, you may not use, copy, reproduce, translate,
 * broadcast, modify, license, transmit, distribute, exhibit,
 * perform, publish, or display any part, in any form, or by
 * any means. Reverse engineering, disassembly, or
 * decompilation of this software, unless required by law for
 * interoperability, is prohibited.
 * 
 * The information contained herein is subject to change
 * without notice and is not warranted to be error-free. If you
 * find any errors, please report them to us in writing.
 */
package http.macaw.io.quickstart.service.calculator.rev160608.impl;

import java.lang.Override;

public class BasicCalculator implements com.cfx.service.api.Service, http.macaw.io.quickstart.service.calculator.rev160608.Calculator {
  @Override
  public void initialize(com.cfx.service.api.config.Configuration config) throws com.cfx.service.api.ServiceException {
  }

  @Override
  public void start(com.cfx.service.api.StartContext startContext) throws com.cfx.service.api.ServiceException {
  }

  @Override
  public void stop(com.cfx.service.api.StopContext stopContext) throws com.cfx.service.api.ServiceException {
  }

  @Override
  public double add(double[] numbers) {
    if (numbers == null) {
      return 0.0d;
    }
    double sum = 0.0d;
    for (final double num : numbers) {
      sum+= num;
    }
    return sum;
  }

  @Override
  public double multiply(double[] numbers) {
    if (numbers == null) {
      return 0.0d;
    }
    double result = 0.0d;
    for (int i = 0; i < numbers.length; i++) {
      if (i == 0) {
        result = numbers[i];
        continue;
      }
      result = result * numbers[i];
    }
    return result;
  }

}
