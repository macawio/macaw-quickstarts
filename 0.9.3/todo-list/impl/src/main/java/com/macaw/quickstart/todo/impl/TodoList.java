//
//  This file was auto-generated by Macaw tools 0.3.0-SNAPSHOT version built on Tue, 14 Feb 2017 14:52:15 +0530 
//
/**
 * Copyright Â© 2015-2016, Macaw Software Inc.
 * All rights reserved.
 * 
 * This software and related documentation are provided under a
 * license agreement containing restrictions on use and
 * disclosure and are protected by intellectual property laws.
 * Except as expressly permitted in your license agreement or
 * allowed by law, you may not use, copy, reproduce, translate,
 * broadcast, modify, license, transmit, distribute, exhibit,
 * perform, publish, or display any part, in any form, or by
 * any means. Reverse engineering, disassembly, or
 * decompilation of this software, unless required by law for
 * interoperability, is prohibited.
 * 
 * The information contained herein is subject to change
 * without notice and is not warranted to be error-free. If you
 * find any errors, please report them to us in writing.
 */
package com.macaw.quickstart.todo.impl;

import com.cfx.service.api.config.Configuration;
import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ProtocolVersion;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datastax.driver.core.Statement;
import com.macaw.quickstart.todo.DomainEntityInstantiator;
import com.macaw.quickstart.todo.Todo;

import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class TodoList implements com.cfx.service.api.Service, com.macaw.quickstart.todo.TodoList {

    private static final String COLON = ":";
    private static final int DEFAULT_CASSANDRA_PORT = 9042;
    private static final String DB_CASSANDRA_KEYSPACE = "db.cassandra.keyspace";
    private static final String DB_CASSANDRA_PASSWORD = "db.cassandra.password";
    private static final String DB_CASSANDRA_USERNAME = "db.cassandra.username";
    private static final String DB_CASSANDRA_CLUSTER_NODES = "db.cassandra.clusterNodes";

    private Configuration serviceConfig;
    private Cluster dbCluster;
    private String dbKeyspace;

    @Override
    public void initialize(final com.cfx.service.api.config.Configuration config) throws com.cfx.service.api.ServiceException {
        this.serviceConfig = config;
        this.dbKeyspace = (String) serviceConfig.requireValue(DB_CASSANDRA_KEYSPACE).getValue();
    }

    @Override
    public void start(com.cfx.service.api.StartContext startContext) throws com.cfx.service.api.ServiceException {
        // create the cassandra DB cluster using the service configs
        this.dbCluster = this.createCluster(this.serviceConfig);
    }

    @Override
    public void stop(com.cfx.service.api.StopContext stopContext) throws com.cfx.service.api.ServiceException {
        // close the db cluster
        if (this.dbCluster != null) {
            this.dbCluster.close();
        }
    }

    @Override
    public com.macaw.quickstart.todo.Todo addTodo(final String summary) {
        if (summary == null || summary.trim().isEmpty()) {
            throw new IllegalArgumentException("Summary, for a todo task, cannot be null or empty");
        }
        final UUID todoId = UUID.randomUUID();
        try (final Session dbSession = this.createCassandraSession()) {
            // create a prepared statement for the insert
            final PreparedStatement preparedStatement = dbSession.prepare("insert into todo (id, summary) values (?, ?)");
            // bind the values
            final Statement statement = preparedStatement.bind(todoId, summary);
            // insert
            dbSession.execute(statement);
        }
        // return the newly created item
        final Todo todo = DomainEntityInstantiator.getInstance().newInstance(Todo.class);
        todo.setId(todoId.toString()).setSummary(summary);
        return todo;
    }


    @Override
    public com.macaw.quickstart.todo.Todo getTodo(final String id) {
        if (id == null || id.isEmpty()) {
            throw new IllegalArgumentException("Id cannot be null or empty");
        }
        final UUID todoId = UUID.fromString(id);
        try (final Session dbSession = this.createCassandraSession()) {
            // create a prepared statement
            final PreparedStatement preparedStatement = dbSession.prepare("select * from todo where id = ?");
            // bind the values
            final Statement statement = preparedStatement.bind(todoId);
            // execute the query
            final ResultSet resultSet = dbSession.execute(statement);
            final Row row = resultSet.one();
            if (row == null) {
                return null;
            }
            final String summary = row.getString("summary");
            final Todo todo = DomainEntityInstantiator.getInstance().newInstance(Todo.class);
            return todo.setId(id).setSummary(summary);
        }
    }

    private Cluster createCluster(final Configuration configuration) {
        final String nodeAndPorts = (String) configuration.requireValue(DB_CASSANDRA_CLUSTER_NODES).getValue();
        final String[] nodeAndPortsArr = nodeAndPorts.split(",");
        final List<InetSocketAddress> nodeAddresses = new ArrayList<>();
        // parse the node:port combinations into InetSocketAddress
        for (final String nodeAndPort : nodeAndPortsArr) {
            String node = nodeAndPort;
            int port = DEFAULT_CASSANDRA_PORT;
            if (nodeAndPort.indexOf(COLON) > 0) {
                final int indexOfColon = nodeAndPort.indexOf(COLON);
                node = nodeAndPort.substring(0, indexOfColon);
                port = Integer.parseInt(nodeAndPort.substring(indexOfColon + 1));
            }
            InetSocketAddress address = new InetSocketAddress(node, port);
            nodeAddresses.add(address);
        }
        final String username = (String) configuration.requireValue(DB_CASSANDRA_USERNAME).getValue();
        final String password = (String) configuration.requireValue(DB_CASSANDRA_PASSWORD).getValue();
        // build the cluster with the configs
        final Cluster.Builder bldr = Cluster.builder().withProtocolVersion(ProtocolVersion.V3);
        for (final InetSocketAddress node : nodeAddresses) {
            if (node == null) {
                continue;
            }
            bldr.addContactPointsWithPorts(node);
        }
        return bldr.withCredentials(username, password).build();
    }

    private Session createCassandraSession() {
        return this.dbCluster.connect(this.dbKeyspace);
    }
}
