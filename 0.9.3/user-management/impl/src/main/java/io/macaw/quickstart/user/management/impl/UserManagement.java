//
//  This file was auto-generated by Macaw tools 0.3.0-SNAPSHOT version built on Tue, 14 Feb 2017 14:52:15 +0530 
//
/**
 * Copyright Â© 2015-2016, Macaw Software Inc.
 * All rights reserved.
 * 
 * This software and related documentation are provided under a
 * license agreement containing restrictions on use and
 * disclosure and are protected by intellectual property laws.
 * Except as expressly permitted in your license agreement or
 * allowed by law, you may not use, copy, reproduce, translate,
 * broadcast, modify, license, transmit, distribute, exhibit,
 * perform, publish, or display any part, in any form, or by
 * any means. Reverse engineering, disassembly, or
 * decompilation of this software, unless required by law for
 * interoperability, is prohibited.
 * 
 * The information contained herein is subject to change
 * without notice and is not warranted to be error-free. If you
 * find any errors, please report them to us in writing.
 */
package io.macaw.quickstart.user.management.impl;

import io.macaw.quickstart.user.management.DomainEntityInstantiator;
import io.macaw.quickstart.user.management.User;

import java.util.concurrent.ConcurrentHashMap;

/**
 * An {@link io.macaw.quickstart.user.management.UserManagement} service which creates and stores the users in-memory
 */
public class UserManagement implements com.cfx.service.api.Service, io.macaw.quickstart.user.management.UserManagement {

    private final ConcurrentHashMap<String, User> users = new ConcurrentHashMap<>();

    @Override
    public void initialize(com.cfx.service.api.config.Configuration config) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public void start(com.cfx.service.api.StartContext startContext) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public void stop(com.cfx.service.api.StopContext stopContext) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public io.macaw.quickstart.user.management.User createUser(final String userId, final String firstName, final String lastName) {
        if (isNullOrEmpty(userId)) {
            throw new IllegalArgumentException("User id cannot be null or empty");
        }
        if (isNullOrEmpty(firstName)) {
            throw new IllegalArgumentException("First name of the user cannot be null or empty");
        }
        // create the user and keep it in our in-memory store
        final User user = DomainEntityInstantiator.getInstance().newInstance(User.class).setId(userId).setFirstName(firstName).setLastName(lastName);
        if (this.users.putIfAbsent(userId, user) != null) {
            throw new RuntimeException("A user with id " + userId + " already exists");
        }
        return user;
    }

    @Override
    public io.macaw.quickstart.user.management.User getUser(final String userId) {
        if (isNullOrEmpty(userId)) {
            throw new IllegalArgumentException("User id cannot be null or empty");
        }
        return this.users.get(userId);
    }

    private static boolean isNullOrEmpty(final String val) {
        return val == null || val.trim().isEmpty();
    }

}
